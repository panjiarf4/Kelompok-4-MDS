---
title: "MDS"
format: html
editor: visual
---

```{r}
library(DBI)
library(RMySQL)
library(glue)
library(readr)
```

```{r}
# Konfigurasi database Clever Cloud
db_config <- list(
  host = "btlxevouzglcbl1tixko-mysql.services.clever-cloud.com",
  port = 3306,
  user = "uf6r5artq92yro23",
  password = "lEDiwks9mEx8UB0XdrT7",
  dbname = "btlxevouzglcbl1tixko"
)
```

```{r}
#2. Membuat koneksi ke MySQL server (tanpa database spesifik)
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)
```

# JIKA BELUM ADA

```{r}
#3. Membuat database jika belum ada
tryCatch({
  dbExecute(con, glue("CREATE DATABASE IF NOT EXISTS {db_config$dbname}"))
  message("Database ", db_config$dbname, " berhasil dibuat/ditemukan")
  }, error = function(e) {
  message("Gagal membuat database: ", e$message)
})
```

# Membuat Tabel ke dalam database

```{r}
# Struktur tabel dalam database
table_definitions <- list(
  Customer = "
    CREATE TABLE IF NOT EXISTS Customer (
      CustomerID INT AUTO_INCREMENT PRIMARY KEY,
      Gender ENUM('Male', 'Female'),
      Locations VARCHAR(100),
      Age INT CHECK (Age >=0),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  ",

  Online_Shop = "
    CREATE TABLE IF NOT EXISTS OnlineShop (
      CustomerID INT,
      Gender VARCHAR(10),
      Location VARCHAR(100),
      Age INT,
      ProductID VARCHAR(50),
      Product_name VARCHAR(255),
      Product_Description TEXT,
      Product_Category VARCHAR(100),
      Stock INT,
      Price DECIMAL(10,2),
      TransactionID INT PRIMARY KEY,
      Transaction_Date DATE,
      Total_Price DECIMAL(10,2),
      Quantity INT,
      VoucherID VARCHAR(50),
      Voucher_name VARCHAR(100),
      Voucher_status VARCHAR(50),
      Discount DECIMAL(5,2),
      PMID VARCHAR(10),
      Method_name VARCHAR(50)
    )
  ",

  Product = "
    CREATE TABLE IF NOT EXISTS Product (
      ProductID VARCHAR(50) PRIMARY KEY,
      Product_Name VARCHAR(255),
      Product_Description TEXT,
      Product_Category VARCHAR(100),
      Stock INT,
      Price DECIMAL(10,2)
    )
  ",

  Voucher = "
    CREATE TABLE IF NOT EXISTS Voucher (
      VoucherID VARCHAR(50) PRIMARY KEY,
      Voucher_name VARCHAR(100),
      Discount DECIMAL(5,2)
    )
  ",

  Transaction = "
    CREATE TABLE IF NOT EXISTS Transaction (
      TransactionID INT PRIMARY KEY,
      Transaction_Date DATE,
      Total_Price DECIMAL(10,2),
      Quantity INT,
      CustomerID INT,
      ProductID VARCHAR(50),
      PMID VARCHAR(10),
      VoucherID VARCHAR(50),
      Voucher_status VARCHAR(50),
      FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
      FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
      FOREIGN KEY (VoucherID) REFERENCES Voucher(VoucherID)
    )
  "
)

# Eksekusi pembuatan tabel
for (table_name in names(table_definitions)) {
  dbExecute(con, table_definitions[[table_name]])
  message("✅ Tabel ", table_name, " berhasil dibuat atau sudah ada.")
}

```

```{r}
# Cek daftar tabel yang berhasil dibuat
tables_online <- dbGetQuery(con, "SHOW TABLES")
print(tables_online)

```

```{r}
# 5. Eksekusi pembuatan tabel
tryCatch({
  
#Buka koneksi ke database spesifik
con_db <- dbConnect(
    MySQL(),
    host = db_config$host,
    port = db_config$port,
    user = db_config$user,
    password = db_config$password,
    dbname = db_config$dbname
  )
  
# Mulai transaksi
dbBegin(con_db)
  
# Buat semua tabel
  for (table_name in names(table_definitions)) {
    dbExecute(con_db, table_definitions[[table_name]])
    message("Tabel ", table_name, " berhasil dibuat")
  }
  
# Commit transaksi
  dbCommit(con_db)

# Verifikasi tabel yang dibuat
  existing_tables <- dbGetQuery(con_db, "SHOW TABLES")
  message("\nTabel yang tersedia di database ", db_config$dbname, ":")
  print(existing_tables)
  
 }, error = function(e) {
  dbRollback(con_db)
  message("Error membuat tabel: ", e$message)
 }, finally = {
  dbDisconnect(con_db)
  dbDisconnect(con)
  message("\nKoneksi database ditutup")
 })
```

# load dataset

```{r}
data_customer <- read_csv("data_customer.csv")
data_onlineshop <- read_csv("data_online_shop.csv")
data_product <- read_csv("data_product.csv")
data_transaction <- read_csv("data_transaction.csv")
data_voucher <- read_csv("data_voucher.csv")

message("✅ Dataset berhasil dimuat.")
```

# Menyesuaikan nama kolom sesuai dengan tabel dalam database

```{r}
# Pastikan nama kolom sesuai dengan tabel dalam MySQL
colnames(data_customer) <- c("CustomerID", "Gender", "Locations", "Age")
colnames(data_onlineshop) <- c("CustomerID", "Gender", "Location", "Age",
                               "ProductID", "Product_name", "Product_Description",
                               "Product_Category", "Stock", "Price", "TransactionID",
                               "Transaction_Date", "Total_Price", "Quantity",
                               "VoucherID", "Voucher_name", "Voucher_status",
                               "Discount", "PMID", "Method_name")
colnames(data_product) <- c("ProductID", "Product_Name", "Product_Description",
                            "Product_Category", "Stock", "Price")
colnames(data_transaction) <- c("TransactionID", "Transaction_Date", "Total_Price",
                                "Quantity", "CustomerID", "ProductID", "PMID",
                                "VoucherID", "Voucher_status")
colnames(data_voucher) <- c("VoucherID", "Voucher_name", "Discount")
```

```{r}
#Ubah format tanggal jika ada kolom date
data_transaction$Transaction_Date <- as.Date(data_transaction$Transaction_Date, format="%d.%m.%y")
data_onlineshop$Transaction_Date <- as.Date(data_onlineshop$Transaction_Date, format="%d.%m.%y")
```

# Memasukkan Data ke dalam setiap tabel pada database

```{r}
for (i in 1:nrow(data_customer)) {
  query <- sprintf(
    "INSERT INTO Customer (CustomerID, Gender, Locations, Age) VALUES (%d, '%s', '%s', %d)",
    as.integer(data_customer$CustomerID[i]),
    data_customer$Gender[i],
    data_customer$Locations[i],
    as.integer(data_customer$Age[i])
  )
  dbExecute(con, query)
}
message("✅ Data Customer berhasil dimasukkan.")

```

```{r}
for (i in 1:nrow(data_product)) {
  query <- sprintf(
    "INSERT INTO Product (ProductID, Product_Name, Product_Description, Product_Category, Stock, Price)
     VALUES (%s, %s, %s, %s, %d, %.2f)",
    dbQuoteString(con, data_product$ProductID[i]),
    dbQuoteString(con, data_product$Product_Name[i]),
    dbQuoteString(con, data_product$Product_Description[i]),
    dbQuoteString(con, data_product$Product_Category[i]),
    as.integer(data_product$Stock[i]),
    as.numeric(data_product$Price[i])
  )
  dbExecute(con, query)
}
message("✅ Data Product berhasil dimasukkan.")

```

```{r}
for (i in 1:nrow(data_onlineshop)) {
  query <- sprintf(
    "INSERT INTO OnlineShop (CustomerID, Gender, Location, Age, ProductID, Product_name, Product_Description, 
                             Product_Category, Stock, Price, TransactionID, Transaction_Date, Total_Price, 
                             Quantity, VoucherID, Voucher_name, Voucher_status, Discount, PMID, Method_name)
     VALUES (%d, %s, %s, %d, %s, %s, %s, %s, %d, %.2f, %d, %s, %.2f, %d, %s, %s, %s, %.2f, %s, %s)",

    as.integer(data_onlineshop$CustomerID[i]),
    dbQuoteString(con, as.character(data_onlineshop$Gender[i])),
    dbQuoteString(con, as.character(data_onlineshop$Location[i])),
    as.integer(data_onlineshop$Age[i]),
    dbQuoteString(con, as.character(data_onlineshop$ProductID[i])),
    dbQuoteString(con, as.character(data_onlineshop$Product_name[i])),
    dbQuoteString(con, as.character(data_onlineshop$Product_Description[i])),
    dbQuoteString(con, as.character(data_onlineshop$Product_Category[i])),
    as.integer(data_onlineshop$Stock[i]),
    as.numeric(data_onlineshop$Price[i]),
    as.integer(data_onlineshop$TransactionID[i]),
    dbQuoteString(con, as.character(data_onlineshop$Transaction_Date[i])),
    as.numeric(data_onlineshop$Total_Price[i]),
    as.integer(data_onlineshop$Quantity[i]),
    dbQuoteString(con, as.character(data_onlineshop$VoucherID[i])),
    dbQuoteString(con, as.character(data_onlineshop$Voucher_name[i])),
    dbQuoteString(con, as.character(data_onlineshop$Voucher_status[i])),
    as.numeric(data_onlineshop$Discount[i]),
    dbQuoteString(con, as.character(data_onlineshop$PMID[i])),
    dbQuoteString(con, as.character(data_onlineshop$Method_name[i]))
  )
  dbExecute(con, query)
}
message("✅ Data OnlineShop berhasil dimasukkan.")

```

```{r}
for (i in 1:nrow(data_voucher)) {
  query <- sprintf(
    "INSERT INTO Voucher (VoucherID, Voucher_name, Discount) VALUES ('%s', '%s', %.2f)",
    data_voucher$VoucherID[i],
    data_voucher$Voucher_name[i],
    as.numeric(data_voucher$Discount[i])
  )
  dbExecute(con, query)
}
message("✅ Data Voucher berhasil dimasukkan.")

```

```{r}
for (i in 1:nrow(data_transaction)) {
  query <- sprintf(
    "INSERT INTO Transaction (TransactionID, Transaction_Date, Total_Price, Quantity, CustomerID, ProductID, PMID, VoucherID, Voucher_status)
     VALUES (%d, '%s', %.2f, %d, %d, '%s', '%s', '%s', '%s')",
    as.integer(data_transaction$TransactionID[i]),
    data_transaction$Transaction_Date[i],
    as.numeric(data_transaction$Total_Price[i]),
    as.integer(data_transaction$Quantity[i]),
    as.integer(data_transaction$CustomerID[i]),
    data_transaction$ProductID[i],
    data_transaction$PMID[i],
    data_transaction$VoucherID[i],
    data_transaction$Voucher_status[i]
  )
  dbExecute(con, query)
}
message("✅ Data Transaction berhasil dimasukkan.")

```

# Mengecek jumlah data yang berhasil dimasukkan

```{r}
message("🔍 Jumlah data dalam setiap tabel:")
print(dbGetQuery(con, "SELECT COUNT(*) AS Customer_Count FROM Customer"))
print(dbGetQuery(con, "SELECT COUNT(*) AS Product_Count FROM Product"))
print(dbGetQuery(con, "SELECT COUNT(*) AS Voucher_Count FROM Voucher"))
print(dbGetQuery(con, "SELECT COUNT(*) AS OnlineShop_Count FROM OnlineShop"))
print(dbGetQuery(con, "SELECT COUNT(*) AS Transaction_Count FROM Transaction"))

```

```{r}
dbDisconnect(con)
message("✅ Koneksi ke database online ditutup.")

```

```{r}
# Ambil 5 data pertama dari setiap tabel
customer_data <- dbGetQuery(con, "SELECT * FROM Customer LIMIT 5")
product_data <- dbGetQuery(con, "SELECT * FROM Product LIMIT 5")
voucher_data <- dbGetQuery(con, "SELECT * FROM Voucher LIMIT 5")
onlineshop_data <- dbGetQuery(con, "SELECT * FROM OnlineShop LIMIT 5")
transaction_data <- dbGetQuery(con, "SELECT * FROM Transaction LIMIT 5")
```

```{r}
# Tampilkan hasilnya
message("📌 Data sampel dari setiap tabel:")
print(customer_data)
print(product_data)
print(voucher_data)
print(onlineshop_data)
print(transaction_data)
```