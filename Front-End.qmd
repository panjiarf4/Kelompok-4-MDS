---
title: "Front-End"
author: "Kelompok 4"
format: html
editor: visual
---

## Library

```{r}
library(shiny)
library(DBI)
library(RMySQL)
library(glue)
library(readr)
library(shinydashboard)
library(DT)
library(ggplot2)
library(dplyr)
library(highcharter)
```

## UI

```{r}
# UI
ui <- dashboardPage(
  skin = "black",
  dashboardHeader(title = span("Sales Dashboard", style = "font-weight: bold;")),
  
  dashboardSidebar(
    sidebarMenu(
      menuItem("Online Shop", tabName = "onlineshop", icon = icon("shopping-cart")),
      menuItem("Customer", tabName = "customer", icon = icon("users")),
      menuItem("Product", tabName = "product", icon = icon("box")),
      menuItem("Transaction", tabName = "transaction", icon = icon("exchange-alt")),
      menuItem("Voucher", tabName = "voucher", icon = icon("tags")),
      menuItem("Member", tabName = "member", icon = icon("users"))
    )
  ),
  
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "onlineshop",
        fluidRow(
          valueBoxOutput("total_price_box", width = 4),
          valueBoxOutput("total_qty_box", width = 4),
          box(
            width = 4,
            selectInput("category", "Select Product Category:", choices = NULL, selected = NULL)
            )
          ),
        fluidRow(
          box(title = div(strong("Customer by Location"), style="text-align: center; font-size: 100%;"), width = 4, highchartOutput("location_bar")),
          box(title = div(strong("Gender Distribution"), style="text-align: center; font-size: 100%;"), width = 4, highchartOutput("gender_pie")),
          box(title = div(strong("Age Distribution"), style="text-align: center; font-size: 100%;"), width = 4, highchartOutput("age_hist"))
          ),
        fluidRow(
                box(width = 12,
                    div(strong("Online Shop Data"),style="text-align: center;font-size: 150%")
                )),
        DTOutput("tableOnlineShop")
      ),
      tabItem(
        tabName = "customer",
        fluidRow(
                box(width = 12,
                    div(strong("Customer Data"),style="text-align: center;font-size: 150%")
                )),
        DTOutput("tableCustomer")
      ),
      tabItem(
        tabName = "product",
        fluidRow(
                box(width = 12,
                    div(strong("Product Data"),style="text-align: center;font-size: 150%")
                )),
        DTOutput("tableProduct")
      ),
      tabItem(
        tabName = "transaction",
        fluidRow(
                box(width = 12,
                    div(strong("Transaction Data"),style="text-align: center;font-size: 150%")
                )),
        DTOutput("tableTransaction")
      ),
      tabItem(
        tabName = "voucher",
        fluidRow(
                box(width = 12,
                    div(strong("Voucher Data"),style="text-align: center;font-size: 150%")
                )),
        DTOutput("tableVoucher")
      )
    ),
    fluidRow(
      tags$div(
        HTML("by <b>Kelompok 4</b> | 2025 "),
        style = "text-align:center; padding:10px; font-size:14px; color:gray;"
      )
    )  
  )
)

```

## Server

```{r}
# Server
server <- function(input, output, session) {

db_config <- list(
  host = "127.0.0.1",
  port = 3309,
  user = "root",
  password = "",
  dbname = "Tugas_Mds"
)
  
con_db <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)
  
  customer_data <- reactive({
  dbGetQuery(con_db, "SELECT * FROM OnlineShop")
})

observe({
  updateSelectInput(session, "category", 
                    choices = unique(customer_data()$Product_Category),
                    selected = NULL)
})

# Update server logic to filter by selected category
data_filtered <- reactive({
  customer_data() %>%
    filter(Product_Category == input$category)
})

output$total_price_box <- renderValueBox({
  total_price <- data_filtered() %>%
    summarise(Total_Price = sum(Total_Price, na.rm = TRUE)) %>%
    pull(Total_Price)
  
  valueBox(
    paste(format(total_price, big.mark = ",")),
    "Total Revenue by Category",
    color = "navy",
    icon = icon("dollar-sign")
  )
})

output$total_qty_box <- renderValueBox({
  total_qty <- data_filtered() %>%
    summarise(Total_qty = sum(Quantity, na.rm = TRUE)) %>%
    pull(Total_qty)
  
  valueBox(
    paste(format(total_qty, big.mark = ",")),
    "Total Quantity by Category",
    color = "navy",
    icon = icon("store")
  )
})

output$gender_pie <- renderHighchart({
  data <- data_filtered()
  
  gender_count <- data %>%
    filter(!is.na(Gender)) %>%
    group_by(Gender) %>%
    summarise(n = n()) %>%
    ungroup()
  
  highchart() %>%
    hc_chart(type = "pie") %>%
    hc_colors(c("#FFB1B1", "#1679AB")) %>% 
    hc_add_series(
      name = "Count",
      data = lapply(1:nrow(gender_count), function(i) {
        list(name = gender_count$Gender[i], y = gender_count$n[i])
      })
    ) %>%
    hc_plotOptions(pie = list(
      allowPointSelect = TRUE,
      cursor = "pointer",
      dataLabels = list(enabled = TRUE, format = "<b>{point.name}</b>: ({point.percentage:.1f}%)")
    ))
})

output$location_bar <- renderHighchart({
  data <- data_filtered()
  
  location_count <- data %>%
    filter(!is.na(Location)) %>%
    group_by(Location) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    arrange(desc(n))
  
  highchart() %>%
    hc_chart(type = "column") %>%
    hc_colors(c("#2973B2", "#48A6A7", "#9ACBD0", "#A3D1C6")) %>% 
    hc_xAxis(categories = location_count$Location) %>%
    hc_yAxis(title = list(text = "Number of Customers")) %>%
    hc_add_series(name = "Count", data = location_count$n, colorByPoint = TRUE) %>%
    hc_plotOptions(column = list(
      dataLabels = list(enabled = TRUE)
    ))
})

output$age_hist <- renderHighchart({
  data <- data_filtered() %>% filter(!is.na(Age))
  
  hist_data <- as.data.frame(table(cut(data$Age, breaks = seq(min(data$Age), max(data$Age), by = 10))))
  names(hist_data) <- c("Age", "Count")
  
  hist_data$Age <- as.character(hist_data$Age)  # Pastikan Age tidak berupa faktor
  
  highchart() %>%
    hc_chart(type = "column") %>%
    hc_xAxis(categories = hist_data$Age, title = list(text = "Age")) %>%
    hc_yAxis(title = list(text = "Count")) %>%
    hc_colors(c("#2973B2", "#48A6A7", "#9ACBD0", "#A3D1C6")) %>%
    hc_add_series(
      name = "Count",
      data = as.numeric(hist_data$Count),
      colorByPoint = TRUE  # Pastikan setiap bar mendapatkan warna berbeda
    ) %>%
    hc_plotOptions(column = list(
      pointPadding = 0.2,
      borderWidth = 0
    ))
})



  output$tableOnlineShop <- renderDT({
    datatable(dbGetQuery(con_db, "SELECT * FROM OnlineShop"),
              options = list(scrollX = TRUE, 
                             scrollY = "400px",
                             pageLength = 20, 
                             autoWidth = TRUE, 
                             class = 'cell-border stripe'))
  })
  
  output$tableCustomer <- renderDT({
    datatable(dbGetQuery(con_db, "SELECT * FROM Customer"),
              options = list(scrollX = TRUE, 
                             scrollY = "400px",
                             pageLength = 20, 
                             autoWidth = TRUE, 
                             class = 'cell-border stripe'))
  })
  
  output$tableProduct <- renderDT({
    datatable(dbGetQuery(con_db, "SELECT * FROM Product"),
              options = list(scrollX = TRUE, 
                             scrollY = "400px",
                             pageLength = 20, 
                             autoWidth = TRUE, 
                             class = 'cell-border stripe'))
  })
  
  output$tableTransaction <- renderDT({
    datatable(dbGetQuery(con_db, "SELECT * FROM Transaction"),
              options = list(scrollX = TRUE, 
                             scrollY = "400px",
                             pageLength = 20, 
                             autoWidth = TRUE, 
                             class = 'cell-border stripe'))
  })
  
  output$tableVoucher <- renderDT({
    datatable(dbGetQuery(con_db, "SELECT * FROM Voucher"),
              options = list(scrollX = TRUE, 
                             scrollY = "400px",
                             pageLength = 20, 
                             autoWidth = TRUE, 
                             class = 'cell-border stripe'))
  })
  
  # Tutup koneksi saat aplikasi berhenti
  onStop(function() {
    dbDisconnect(con_db)
  })
}

```

## Run App

```{r}
# Run App
shinyApp(ui, server)
```
